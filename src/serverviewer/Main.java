/*
 * Copyright (c) 2009 Christian Ratzenhofer <christian_ratzenhofer@yahoo.de>
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 * */
package serverviewer;

import java.io.FileNotFoundException;
import java.io.IOException;
import serverviewer.config.Config;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultTreeModel;
import serverviewer.config.ConfigServer;
import serverviewer.config.EtServer;
import serverviewer.config.Ts2Server;
import serverviewer.config.Ts3Server;
import serverviewer.gui.ConfigListModel;
import serverviewer.gui.EtServerDialog;
import serverviewer.gui.ServerEditor;
import serverviewer.gui.ServerTreeNode;
import serverviewer.gui.ServerTreeNodeType;
import serverviewer.gui.ServerTreeRenderer;
import serverviewer.gui.ServerTreeUpdater;
import serverviewer.gui.Ts2ServerDialog;
import serverviewer.gui.Ts3ServerDialog;

public class Main extends javax.swing.JFrame {

    private Config config = new Config();
    private DefaultTreeModel serverTreeModel;

    /** Creates new form main */
    public Main() {
        initComponents();
        setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(Main.class.getResource("icons/merlin.gif")).getImage());
        try {
            this.config.loadConfig();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "couldn't find the config file, crating default one", "error while loading config", JOptionPane.INFORMATION_MESSAGE);
            this.config.createExampleConfig();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex, "error while loading config", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
        ServerTreeNode rootNode = new ServerTreeNode("root", ServerTreeNodeType.Info);
        ServerTreeNode infoNode = new ServerTreeNode("press refresh to query the servers", ServerTreeNodeType.Info);
        rootNode.add(infoNode);
        serverTreeModel = new DefaultTreeModel(rootNode);
        jtree_queryServers.setModel(serverTreeModel);
        jtree_queryServers.setCellRenderer(new ServerTreeRenderer());
        jList_configServers.setModel(new ConfigListModel(config.getServers()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtree_queryServers = new javax.swing.JTree();
        btn_refresh = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_configServers = new javax.swing.JList();
        jButton_newServer = new javax.swing.JButton();
        jButton_moveUp = new javax.swing.JButton();
        jButton_moveDown = new javax.swing.JButton();
        jButton_editServer = new javax.swing.JButton();
        jButton_deleteServer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("server-viewer by merlin1991");

        jtree_queryServers.setRootVisible(false);
        jScrollPane1.setViewportView(jtree_queryServers);

        btn_refresh.setText("Refresh"); // NOI18N
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .addComponent(btn_refresh, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_refresh)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Main", jPanel1);

        jList_configServers.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList_configServers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jList_configServers);

        jButton_newServer.setText("New Server");
        jButton_newServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_newServerActionPerformed(evt);
            }
        });

        jButton_moveUp.setText("Move up");
        jButton_moveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_moveUpActionPerformed(evt);
            }
        });

        jButton_moveDown.setText("Move down");
        jButton_moveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_moveDownActionPerformed(evt);
            }
        });

        jButton_editServer.setText("Edit Server");
        jButton_editServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_editServerActionPerformed(evt);
            }
        });

        jButton_deleteServer.setText("Delete Server");
        jButton_deleteServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_deleteServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_moveUp, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(jButton_newServer, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(jButton_moveDown, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(jButton_editServer, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(jButton_deleteServer, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton_newServer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_moveUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_moveDown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_editServer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_deleteServer))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Settings", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        btn_refresh.setEnabled(false);
        Thread updater = new Thread(new ServerTreeUpdater(this, config.getServers()));
        updater.setDaemon(true);
        updater.start();        
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void jButton_newServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_newServerActionPerformed
        Object[] possibilities = {"TeamSpeak2 server", "TeamSpeak3 server", "Enemy Territory server"};
        String serverType = (String) JOptionPane.showInputDialog(this, "select the server type", "New server", JOptionPane.PLAIN_MESSAGE, null, possibilities, "TeamSpeak server");
        if (serverType != null) {
            ServerEditor editDialog = null;
            if (serverType.equals("Enemy Territory server")) {
                editDialog = new EtServerDialog(this);
            } else if (serverType.equals("TeamSpeak2 server")) {
                editDialog = new Ts2ServerDialog(this);
            } else if (serverType.equals("TeamSpeak3 server")) {
                editDialog = new Ts3ServerDialog(this);
            }
            editDialog.setLocationRelativeTo(this);
            editDialog.setVisible(true);
            if (editDialog.hasResult()) {
                config.getServers().add(editDialog.getServer());
                jList_configServers.updateUI();
                try {
                    config.saveConfig();
                } catch (IOException ex) {
                }
            }
        }
}//GEN-LAST:event_jButton_newServerActionPerformed

    private void jButton_moveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_moveUpActionPerformed
        if (jList_configServers.getSelectedIndex() != -1 && jList_configServers.getSelectedIndex() > 0) {
            ConfigServer tempServer = config.getServers().get(jList_configServers.getSelectedIndex() - 1);
            config.getServers().set(jList_configServers.getSelectedIndex() - 1, config.getServers().get(jList_configServers.getSelectedIndex()));
            config.getServers().set(jList_configServers.getSelectedIndex(), tempServer);
            jList_configServers.setSelectedIndex(jList_configServers.getSelectedIndex() - 1);
            jList_configServers.updateUI();
            try {
                config.saveConfig();
            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_jButton_moveUpActionPerformed

    private void jButton_moveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_moveDownActionPerformed
        if (jList_configServers.getSelectedIndex() != -1 && jList_configServers.getSelectedIndex() < config.getServers().size() - 1) {
            ConfigServer tempServer = config.getServers().get(jList_configServers.getSelectedIndex() + 1);
            config.getServers().set(jList_configServers.getSelectedIndex() + 1, config.getServers().get(jList_configServers.getSelectedIndex()));
            config.getServers().set(jList_configServers.getSelectedIndex(), tempServer);
            jList_configServers.setSelectedIndex(jList_configServers.getSelectedIndex() + 1);
            jList_configServers.updateUI();
            try {
                config.saveConfig();
            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_jButton_moveDownActionPerformed

    private void jButton_deleteServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_deleteServerActionPerformed
        if (jList_configServers.getSelectedIndex() != -1) {
            config.getServers().remove(jList_configServers.getSelectedIndex());
            jList_configServers.setSelectedIndex(-1);
            jList_configServers.updateUI();
            try {
                config.saveConfig();
            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_jButton_deleteServerActionPerformed

    private void jButton_editServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_editServerActionPerformed
        if (jList_configServers.getSelectedIndex() != -1) {
            ConfigServer server = config.getServers().get(jList_configServers.getSelectedIndex());
            ServerEditor editDialog = null;
            switch (server.getType()) {
                case Et:
                    editDialog = new EtServerDialog(this, (EtServer) server);
                    break;
                case Ts:
                    editDialog = new Ts2ServerDialog(this, (Ts2Server) server);
                    break;
                case Ts3:
                    editDialog = new Ts3ServerDialog(this, (Ts3Server) server);
                    break;
            }
            editDialog.setLocationRelativeTo(this);
            editDialog.setVisible(true);
            config.getServers().set(jList_configServers.getSelectedIndex(), editDialog.getServer());
            jList_configServers.updateUI();
            try {
                config.saveConfig();
            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_jButton_editServerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    public void updateServerTree(ServerTreeNode rootNode) {
        serverTreeModel.setRoot(rootNode);
        btn_refresh.setEnabled(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton jButton_deleteServer;
    private javax.swing.JButton jButton_editServer;
    private javax.swing.JButton jButton_moveDown;
    private javax.swing.JButton jButton_moveUp;
    private javax.swing.JButton jButton_newServer;
    private javax.swing.JList jList_configServers;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTree jtree_queryServers;
    // End of variables declaration//GEN-END:variables
}
